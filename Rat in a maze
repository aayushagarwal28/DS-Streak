// https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

// m is the given matrix and n is the order of matrix
class Solution {
    public static ArrayList<String> findPath(int[][] mat, int n) {
        // Your code here
        
        
        ArrayList<String> sol = new ArrayList<>();
         
        if(mat[0][0] == 0){
            return sol;
        }
        int[][] visited = new int[n][n];
        
        for(int i=0; i< n;i++){
            for(int j=0; j< n; j++){
                visited[i][j] = 0;
            }
        }
        solve(mat,0,0,n,"",sol,visited);
        
        
       
        return sol;
    }
    
    public static boolean isValid(int[][] mat,int x,int y,int n, int[][] visited){
        
        return (x >=0 && y >=0 && x < n && y < n && mat[x][y] == 1 && visited[x][y] == 0);
    }
    
    public static void solve(int[][] mat,int x,int y,int n,String temp,ArrayList<String> sol, int[][] visited){
        
        if(x == (n-1) && y == (n-1) && mat[x][y] == 1){
            
            sol.add(temp);
            return;
        }
      
        //reached a valid x, y . 
         visited[x][y]= 1;
    
           if(isValid(mat,x-1,y,n,visited)){
            
           solve(mat,x-1,y,n,temp + "U",sol,visited);
           
           }
           
          if(isValid(mat,x+1,y,n,visited)){
            
              solve(mat,x+1,y,n,temp + "D",sol,visited);
             
          }
           
           
            if(isValid(mat,x,y-1,n,visited)){
               
           solve(mat,x,y-1,n,temp + "L",sol,visited);
          
            }
           
            if(isValid(mat,x,y+1,n,visited)){
              
           solve(mat,x,y+1,n,temp+"R",sol,visited);
           
            }
    
        
         //backtrace 
        visited[x][y]= 0;
        
    }
}
